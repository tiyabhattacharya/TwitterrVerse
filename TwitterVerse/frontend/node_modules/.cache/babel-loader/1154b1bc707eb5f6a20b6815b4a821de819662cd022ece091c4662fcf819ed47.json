{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\master\\\\OneDrive\\\\Desktop\\\\TwitterrVerse\\\\TwitterVerse\\\\frontend\\\\src\\\\pages\\\\Feed\\\\TweetBox\\\\TweetBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./TweetBox.css\";\nimport { Avatar, Button } from \"@mui/material\";\nimport AddPhotoAlternateIcon from '@mui/icons-material/AddPhotoAlternateOutlined';\nimport axios from \"axios\";\nimport useLoggedInUser from \"../../../hooks/useLoggedInUser\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport auth from \"../../../firebase.init\"; // Ensure you import your Firebase auth object\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TweetBox() {\n  _s();\n  var _loggedInUser$3, _loggedInUser$4;\n  const [post, setPost] = useState('');\n  const [imageURL, setImageURL] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [name, setName] = useState('');\n  const [username, setUsername] = useState('');\n  const [loggedInUser] = useLoggedInUser();\n  const [user, loading, error] = useAuthState(auth); // Pass the auth object here\n  const email = user === null || user === void 0 ? void 0 : user.email;\n\n  //const userProfilePic = loggedInUser[0]?.profileImage ? loggedInUser[0]?.profileImage : \"https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png\";\n  //const userProfilePic = loggedInUser[0]?.profileImage ? loggedInUser[0]?.profileImage : \"https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png\"\n  const handleUploadImage = e => {\n    setIsLoading(true);\n    const image = e.target.files[0];\n    const formData = new FormData();\n    formData.set('image', image);\n    axios.post(\"https://api.imgbb.com/1/upload?key=ce2e4d1f58f22cdab08d0a12bec54f73\", formData).then(res => {\n      setImageURL(res.data.data.display_url);\n      console.log(res.data.data.display_url);\n      setIsLoading(false);\n    }).catch(error => {\n      console.log(error);\n      setIsLoading(false);\n    });\n  };\n  const handleTweet = async e => {\n    e.preventDefault();\n    if (!user) {\n      console.error(\"User is not authenticated\");\n      return;\n    }\n    try {\n      if (user.providerData[0].providerId === 'password') {\n        var _data$, _data$2;\n        const response = await fetch(`http://localhost:5000/loggedInUser?email=${email}`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setName((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.name);\n        setUsername((_data$2 = data[0]) === null || _data$2 === void 0 ? void 0 : _data$2.username);\n      } else {\n        setName(user === null || user === void 0 ? void 0 : user.displayName);\n        setUsername(email === null || email === void 0 ? void 0 : email.split('@')[0]);\n      }\n      if (name) {\n        var _loggedInUser$, _loggedInUser$2;\n        const userPost = {\n          profilePhoto: /*#__PURE__*/_jsxDEV(Avatar, {\n            src: (_loggedInUser$ = loggedInUser[0]) !== null && _loggedInUser$ !== void 0 && _loggedInUser$.profileImage ? (_loggedInUser$2 = loggedInUser[0]) === null || _loggedInUser$2 === void 0 ? void 0 : _loggedInUser$2.profileImage : \"https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 35\n          }, this),\n          post: post,\n          photo: imageURL,\n          username: username,\n          name: name,\n          email: email\n        };\n        setPost('');\n        setImageURL('');\n        const postResponse = await fetch('http://localhost:5000/post', {\n          method: \"POST\",\n          headers: {\n            'content-type': 'application/json'\n          },\n          body: JSON.stringify(userPost)\n        });\n        if (!postResponse.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const postData = await postResponse.json();\n        console.log(postData);\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tweetBox\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleTweet,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tweetBox__input\",\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          src: (_loggedInUser$3 = loggedInUser[0]) !== null && _loggedInUser$3 !== void 0 && _loggedInUser$3.profileImage ? (_loggedInUser$4 = loggedInUser[0]) === null || _loggedInUser$4 === void 0 ? void 0 : _loggedInUser$4.profileImage : \"https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"What's happening?\",\n          onChange: e => setPost(e.target.value),\n          value: post,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"imageIcon_tweetButton\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"image\",\n          className: \"imageIcon\",\n          children: isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Uploading image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 38\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: imageURL ? 'Image uploaded' : /*#__PURE__*/_jsxDEV(AddPhotoAlternateIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 97\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 63\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"image\",\n          className: \"imageInput\",\n          onChange: handleUploadImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"tweetBox__tweetButton\",\n          type: \"submit\",\n          children: \"Tweet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n}\n_s(TweetBox, \"t15GxfKddaS0Mn+LvOHaGGlCZtU=\", false, function () {\n  return [useLoggedInUser, useAuthState];\n});\n_c = TweetBox;\nexport default TweetBox;\nvar _c;\n$RefreshReg$(_c, \"TweetBox\");","map":{"version":3,"names":["React","useState","useEffect","Avatar","Button","AddPhotoAlternateIcon","axios","useLoggedInUser","useAuthState","auth","jsxDEV","_jsxDEV","TweetBox","_s","_loggedInUser$3","_loggedInUser$4","post","setPost","imageURL","setImageURL","isLoading","setIsLoading","name","setName","username","setUsername","loggedInUser","user","loading","error","email","handleUploadImage","e","image","target","files","formData","FormData","set","then","res","data","display_url","console","log","catch","handleTweet","preventDefault","providerData","providerId","_data$","_data$2","response","fetch","ok","Error","json","displayName","split","_loggedInUser$","_loggedInUser$2","userPost","profilePhoto","src","profileImage","fileName","_jsxFileName","lineNumber","columnNumber","photo","postResponse","method","headers","body","JSON","stringify","postData","className","children","onSubmit","type","placeholder","onChange","value","required","htmlFor","id","_c","$RefreshReg$"],"sources":["C:/Users/master/OneDrive/Desktop/TwitterrVerse/TwitterVerse/frontend/src/pages/Feed/TweetBox/TweetBox.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./TweetBox.css\";\r\nimport { Avatar, Button } from \"@mui/material\";\r\nimport AddPhotoAlternateIcon from '@mui/icons-material/AddPhotoAlternateOutlined';\r\nimport axios from \"axios\";\r\nimport useLoggedInUser from \"../../../hooks/useLoggedInUser\";\r\nimport { useAuthState } from \"react-firebase-hooks/auth\";\r\nimport auth from \"../../../firebase.init\"; // Ensure you import your Firebase auth object\r\n\r\nfunction TweetBox() {\r\n    const [post, setPost] = useState('');\r\n    const [imageURL, setImageURL] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [name, setName] = useState('');\r\n    const [username, setUsername] = useState('');\r\n    const [loggedInUser] = useLoggedInUser();\r\n    const [user, loading, error] = useAuthState(auth); // Pass the auth object here\r\n    const email = user?.email;\r\n\r\n    //const userProfilePic = loggedInUser[0]?.profileImage ? loggedInUser[0]?.profileImage : \"https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png\";\r\n    //const userProfilePic = loggedInUser[0]?.profileImage ? loggedInUser[0]?.profileImage : \"https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png\"\r\n    const handleUploadImage = (e) => {\r\n        setIsLoading(true);\r\n        const image = e.target.files[0];\r\n        const formData = new FormData();\r\n        formData.set('image', image);\r\n\r\n        axios.post(\"https://api.imgbb.com/1/upload?key=ce2e4d1f58f22cdab08d0a12bec54f73\", formData)\r\n            .then(res => {\r\n                setImageURL(res.data.data.display_url);\r\n                console.log(res.data.data.display_url);\r\n                setIsLoading(false);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                setIsLoading(false);\r\n            });\r\n    }\r\n\r\n    const handleTweet = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if (!user) {\r\n            console.error(\"User is not authenticated\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            if (user.providerData[0].providerId === 'password') {\r\n                const response = await fetch(`http://localhost:5000/loggedInUser?email=${email}`);\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                const data = await response.json();\r\n                setName(data[0]?.name);\r\n                setUsername(data[0]?.username);\r\n            } else {\r\n                setName(user?.displayName);\r\n                setUsername(email?.split('@')[0]);\r\n            }\r\n\r\n            if (name) {\r\n                const userPost = {\r\n                    profilePhoto: <Avatar src={loggedInUser[0]?.profileImage ? loggedInUser[0]?.profileImage : \"https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png\"} />,\r\n                    post: post,\r\n                    photo: imageURL,\r\n                    username: username,\r\n                    name: name,\r\n                    email: email,\r\n                };\r\n                setPost('');\r\n                setImageURL('');\r\n\r\n                const postResponse = await fetch('http://localhost:5000/post', {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        'content-type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(userPost),\r\n                });\r\n\r\n                if (!postResponse.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n\r\n                const postData = await postResponse.json();\r\n                console.log(postData);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch:\", error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"tweetBox\">\r\n            <form onSubmit={handleTweet}>\r\n                <div className=\"tweetBox__input\">\r\n                {/* <Avatar src={loggedInUser[0]?.profileImage ? loggedInUser[0]?.profileImage : \"https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png\"} /> */}\r\n                <Avatar src={loggedInUser[0]?.profileImage ? loggedInUser[0]?.profileImage : \"https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png\"} />    \r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"What's happening?\"\r\n                        onChange={(e) => setPost(e.target.value)}\r\n                        value={post}\r\n                        required\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"imageIcon_tweetButton\">\r\n                    <label htmlFor='image' className=\"imageIcon\">\r\n                        {isLoading ? <p>Uploading image</p> : <p>{imageURL ? 'Image uploaded' : <AddPhotoAlternateIcon />}</p>}\r\n                    </label>\r\n                    <input\r\n                        type=\"file\"\r\n                        id='image'\r\n                        className=\"imageInput\"\r\n                        onChange={handleUploadImage}\r\n                    />\r\n                    <Button className=\"tweetBox__tweetButton\" type=\"submit\">Tweet</Button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TweetBox;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}